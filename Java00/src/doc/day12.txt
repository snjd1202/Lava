# day12

--------------------------------------------------------------------------------------------------------------------
참고]

	함수의 오버로딩(Overloading : 함수의 중첩)
	==> 클래스 내에 동일한 이름의 함수를 정의하는 방법
		함수를 준비된 데이터의 유형이나 갯수에 맞게 호출할 수 있는 방법
		
-------------------------------------------------------------------------------------------------------------------- 

*****
함수의 오버라이딩(Overriding : 함수의 재정의)
==> 상속 관계에 있는 하위 클래스에서
	상위 클래스가 가진 함수의 기능을 수정하는 행위 
	
	방법]
	
		0. 고쳐 쓰려는 함수를 가진 클래스를 상속 받아야한다.
			
		1. 상위 클래스가 가진 함수의 원형과 동일한 형태로 만들어야 한다.
		
			참고]
				함수의 원형(Prototype)
					: 반환값 + 함수이름 + 매개변수리스트
					
		2. 접근지정자는 
			같거나 넓은 방향으로 해야 한다.
			
		3. 예외처리는 같거나 좁은 방향으로 해야 한다.
		
	이렇게 오버라이딩을 하면 
	내부적으로 super(상위클래스)의 함수가 숨겨지고 재정의한 함수를 사용하게 된다.
	
	예]
		class Father {
			void abc(int a) {}
		}
		
		class Son extands Father {
			void abc(float a){}		==> 함수의 중첩(Overloading)
			
			void abc(int a){		==> 함수의 재정의(Overriding)
				abc(a);
			}
		}
		
		참고]
			super
				==> this가 현재 실행중인 자기자신의 주소를 기억하는 변수이듯이
					super 역시 예약된 변수 중 하나이다.
					자신의 상위 클래스의 주소를 기억하는 변수
					
				사용목적]
					반드시 상위클래스의 소속임을 밝혀야 하는 경우가 생길 때 사용한다.
					
------------------------------------------------------------------------------------------------------------------------------------

	Object 클래스
		==> 자바로 만들어진 클래스의 최상위 super 클래스의 역할을 하는 클래스
			따라서 자바로 만들어진 모든 클래스는 Object가 제공하는
			모든 기능(멤버 : 함수 + 변수)을 자동적으로 사용할 수 있게 된다.
			
		참고]
			이렇게 최상위 클래스를 만들어 놓은 이유는?
			계층 추적을 원활히 하도록 하기 위해서...
			<== 각각의 클래스의 족보를 정확하게 따질 수 있도록 하기 위해서...
			
		참고]
			자바로 만든 모든 클래스는 반드시 상위 클래스를 가지고 있다.
			우리가 이제까지 만든 모든 클래스 역시 상위 클래스를 가지고 있다.
			만약 강제로 상위 클래스를 지정하지 않으면( ==> extends XXX 라고 기술하지 않으면..)
			묵시적으로 Object 라는 클래스를 상속 받아서 만들어진다.
			
			
	***
	instanceof
	==> 특정 클래스를 new 시키면 주소가 만들어진다.
		이 주소가 어떤 클래스 소속의 주소인지 알아내는 연산자
		연산의 결과는 true(참), false(거짓)으로 나오게 된다.
		
		형식]
			주소	instanceof	클래스이름
			
		의미]
			주소가 가리키고 있는 곳의 내용이 
			지정한 클래스 소속인지를 물어보는 것
			
	참고]
		소속이라는 개념은 
		is a 관계를 따져주는 것이다.
		따라서 상속 관계를 따지는개념이 소속이라는 것이다.
		
----------------------------------------------------------------------------------------------------------------------------------------------------------

	package와 import
	
		package
			==> 자바 프로그램(소스)가 들어있는 폴더를 
				자바적인 용어로 부르는 말이다.
				
				자바는 오픈소스이다.
				모든 사람이 자신이 만든 프로그램을 배포할 수 있고,
				그것을 모든 사람이 이용할 수 있는 프로그램이다.
				
				그런데 
					클래스이름이 충돌이 날 수 있다.
				이런 문제를 해결하기 위해서 만들어 놓은 한 가지 방법이 
				바로 패키지이다.
				
				즉, 소스를 만드는 사람이 그 프로그램이 포함되는
				폴더이름까지 정해서 프로그램을 만들도록 하는 것
				
				결론]
					자바 프로그램을 만들때는 반드시 
					이 프로그램이 어떤 폴더에 저장되는지를 알려주도록 해 놓았다.
					
				명령]
					
					package		폴더이름;
					
			참고]
				
				패키지 이름을 만드는 권장 사항
					==> 자신이 사용하는 도메인을 거꾸로 쓴 후
						그 다음에 다시 폴더 이름을 붙여라...
						
						예]
							www.increpas.com
							com.increpas.www.score
							
-----------------------------------------------------------------------------------------------------------------------

import

	==> 자신이 사용할 클래스가 어느 폴더(패키지)에 있는 클래스를 사용할지를 
		밝혀주기 위한 명령
		
		예]
			sample/Test.class
			
			Test/Test.class
			
		형식 1]
			import	패키지경로.클래스이름;
			==> 지정한 폴더에 있는 클래스를 사용할 예정임을 밝혀두는 것.
			
			예]
				import java.util.Scanner;
				
		형식 2]  
			import	패키지경로.*;
			==> 지정한 폴더에 있는 모든 클래스를 사용할 예정임을 밝혀주는 것.
			
			예]
				import java.util.*;
				==> java.util 패키지 소속의 모든 클래스를 사용할 예정임을 밝혀주는 것.
				
		참고]
			형식 2번보다는 1번을 우선시 한다.
			
		참고]
			import 하지 않아도
			명시적으로 클래스 이름 앞에 패키지이름을 붙여서 사용할 수도 있다.
			
			예]
				java.util.Scanner sc = new java.util.Scanner(System.in);
				
				
	**
	참고]
		java.lang 패키지는
		import 하지 않아도 사용할 수 있다.
		<==	JVM이 기본적으로 찾아보는 패키지 이기 때문이다.
		
		참고]
			import를 하게 되면 해당 패키지만 선언하게 되는 것이다.
			즉, 상위나 하위는 포함되지 않는다.
			
			a
				AAA.java
				CCC.java
				b-------
					|__ZZZ.java
					|__YYY.java
					
					
		위의 경우
		import a.*;
		==> AAA.java, CCC.java는 사용할 수 있지만 
			ZZZ.java, YYY.java는 사용할 수 없다.
			
			
	static import
	==> static 멤버는 원칙적으로 클래스이름.멤버로 사용한다.
	
		Math.PI
		Math.random()
		
		이때 static 멤버 앞에 사용하는 클래스 이름도 생략할 수 있다.
		==> 이처럼 static 멤버를 사용할 때
			이름을 생략하도록 하는 방법 static import이다.
			
		형식]
			import		static		패키지이름
			
---------------------------------------------------------------------------------

	final	속성
	
		1. final 클래스
			==> 이 속성이 붙은 클래스는
				더 이상 상속이 불가능한 클래스임을 밝혀주는 속성
				따라서 기능을 추가 혹은 변경하지 말고 
				현재 기능 그대로만 이용하라는 의미의 클래스이다.
				
		2. final 함수
			==> 이 속성이 붙은 함수는
				오버라이드(함수의 재정의)가 불가능한 함수이다.
				따라서 이 함수는 매우 중요한 함수이므로
				함부로 기능을 바꾸지 말고 현재 기능 그대로 사용하라.
		
		3. final 변수
			==> 이 속성이 붙은 변수는 값을 수정할 수 없는 변수이다.
				즉, 현재 값을 유지해야만 하는 변수
				
---------------------------------------------------------------------------------

	접근지정자
			
		==> 내용을 누구까지 사용할 수 있는지를 지정하는 예약된 용어
			즉, 우리가 클래스를 만든다고 해서
			그 클래스가 모든 사람에게 공개되는 것은 아니다.
			클래스를 제작하는 사람이 사용범위를 지정할 수 있다.
			
			예]
				class는 누구까지 이 클래스를 사용하게 할까??
				new 시킬 수 있도록 할까??
				
				변수는 누구까지 데이터를 읽거나 입력하게 할 것이냐?
				
		종류]
			1. private
				==> 절대로 다른 클래스에서는 사용할 수 없고,
					오직 자신의 클래스 내에서만 사용할 수 있다.
					
			2. 생략
				==> 같은 패키지 소속의 클래스에서만 사용할 수 있다.
			
			3. protected
				==> 상속받은 하위클래스와 같은 패키지 소속의 클래스에서 사용 가능하다.
			
			4. public
				==> 모든 곳에서 사용할 수 있다.
				
		참고]
			class에는 public과 생략하는 경우만 사용할 수 있다.
			
		참고]
			클래스의 접근 지정의 의미는 클래스 자체를 사용할지 여부를 지정하는 것이다.
			생성자 함수의 접근지정자의 의미는
			어디까지 new 시킬 수 있는지를 의미하는 것
			
------------------------------------------------------------------------------------------------------

	참고]
		객체지향 언어의 특징
		
			1. 상속
			2. 다형성
			3. 은닉화 & 캡슐화
			
------------------------------------------------------------------------------------------------------

	***
	은닉화
		프로그램에 있어서 가장 중요한 요소는 데이터이다.
		즉, 변수가 프로그램에서의 핵심적인 요소가 되는 것이다.
		무결성 데이터를 유지할 수 있는 것이 가장 중요한 개념이 된다.
		
		은닉화란?
		변수를 사용자가 함부로 변경하지 못하도록 
		(==> 결점이 있는 데이터가 오지 못하도록)
		방지하는 기술을 은닉화라고 한다.
		
		방법]
			1. 중요한 데이터가 기억될 변수는 접근지정자를 private으로 처리한다.
				==> 이렇게 만들면 그 변수는 다른 사용자가 사용할 수 없게 된다.
				
			2. 대신 이 변수의 값을 변경하거나, 값을 알 수 있는 통로를 만들어 놓는다.
				<== 함수를 사용한다.(getters & setters)
				 
-------------------------------------------------------------------------------------------------------------

	review]
	
		함수의 Overriding 규칙]
			
			0. 상속을 받는다.
			
			1. 함수의 원형은 반드시 일치해야 한다.
				(반환값 + 함수이름 + 매개변수리스트 ==> 함수의 원형)
			 
		 	2. 접근지정자는 같거나 넓은 방향으로 해야한다.
		 	
		 		접근지정자의 범위
		 			
		 			private		<	생략	<	protected	<	public
		 			
		 	3. 예외처리는 같거나 좁은 방향으로 한다.
		 	
--------------------------------------------------------------------------------------------------------------

	다형성
	
		==> 하나의 변수를 이용해서 여러 형태의 클래스를 사용하도록 하는 기법
		
	주소의 형변환(Casting)
	==> 원칙적으로 주소는 다른 형태의 형 변환이 불가능하다.
		즉, 주소는 Heap 형태에 따라 주소가 결정이 되기 때문에
		Heap 형태가 다르면 주소를 기억할 수 없다.
		
		예]
			int[] no1 = new float[5];
			
			Test t = new Sample();
			
	*****
	딱 한가지 경우에 한해서 주소의 형변환이 가능하다.
	상속 관계에 있는 클래스끼리는 형변환이 가능하다.
	왜??
		is a 관계이기 때문에...
		
			자동형변환
				하위클래스의 주소가 상위 클래스의 변수에 기억되는 것은
				자동적으로 형변환이 된다.
				
			강제형변환
				상위클래스의 주소가 하위 클래스의 변수에 기억되는 것은
				원칙적으로 불가능하며,
				다만 강제로 형변환 해주어야 한다.
				
			
		예]
			class Father{}
			
			class Son extends Father{}
			
			Son s = new Son();
			
			Father f = s;			==> 자동형변환
			
			Father f1 = new Father();
			Son s1 = f1;			==> 불가능하다.
			Son s1 = (Son) f1;		==> 강제형변환을 해줘야 한다.
			
			
		다형성이란?
			주소의 형변환 이론을 기반으로 하여
			상위 클래스의 주소를 이용해서 하위클래스를 이용할 수 있으며
			상위 클래스의 주소를 이용하면 
			여러 하위 클래스를 다룰 수 있다.
		
---------------------------------------------------------------------------------------------------------------

	여러분들 입장에서의 다형성...
		상위 클래스의 변수를 이용해서 하위클래스를 사용할 수 있다.
		라는 말이므로
		상위 클래스의 변수를 이용해서 하위 클래스를 받아서 사용하면 된다.
		
		주의]
		
		1.
			이 때 주의사항은
			
				변수	: 레퍼런스 쪽을 사용하게 되고,
							==> 따라서 변수는 함부로 건드리지 마세요.
								하위클래스에서 상위클래스의 변수는 되도록이면 수정하지 않는 것이 좋다.
				
				함수	: 인스턴스 쪽을 사용하게 된다.
							==> 맨 마지막에 오버라이딩 된 함수를 호출하게 된다.
							
		따라서 어떤 함수가 Object를 매개변수로 가지고 있다면
		그 함수는 실행할 대 어떤 데이터를 입력하더라고 실행이 된다는 의미이다.
		
		2. 어떤 함수가 상위 클래스를 반환값으로 가지고 있으면
			반드시 원하는 하위 클래스 형태로 형변환해서 사용해야 한다.